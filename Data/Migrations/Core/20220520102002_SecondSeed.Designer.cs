// <auto-generated />
using System;
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Data.Migrations.Core
{
    [DbContext(typeof(DataContext))]
    [Migration("20220520102002_SecondSeed")]
    partial class SecondSeed
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Entities.Employee", b =>
                {
                    b.Property<string>("EmployeeId")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTimeOffset>("InsertDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("InsertPersonId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PersonId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatePersonId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("EmployeeId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("PersonId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Employee");

                    b.HasData(
                        new
                        {
                            EmployeeId = "5b6cd63e-e6bb-4168-bb33-ae73952c716f",
                            Email = "superadmin@project.com",
                            InsertDate = new DateTimeOffset(new DateTime(2022, 5, 20, 10, 20, 2, 7, DateTimeKind.Unspecified).AddTicks(2588), new TimeSpan(0, 0, 0, 0, 0)),
                            InsertPersonId = "1",
                            PasswordHash = "AQAAAAEAAYagAAAAECYRvg4UxADgEMkvzWBbZ7BzwVeMhe23Iu/Yc2XANppkQ3VwbLpWuwPjziLJHQfoyA==",
                            PersonId = "fc32092d-d2dc-4a6a-a0b0-a4a482d21c07",
                            PhoneNumber = "9841111111",
                            RoleId = "d0b3eab9-9f9d-45cc-95c0-b28fb7062868",
                            UpdateDate = new DateTimeOffset(new DateTime(2022, 5, 20, 10, 20, 2, 7, DateTimeKind.Unspecified).AddTicks(2589), new TimeSpan(0, 0, 0, 0, 0)),
                            UpdatePersonId = "1",
                            UserName = "superadmin"
                        },
                        new
                        {
                            EmployeeId = "test555-e6bb-4168-bb33-ae73952c716f",
                            Email = "test@mail.com",
                            InsertDate = new DateTimeOffset(new DateTime(2022, 5, 20, 10, 20, 2, 7, DateTimeKind.Unspecified).AddTicks(2614), new TimeSpan(0, 0, 0, 0, 0)),
                            InsertPersonId = "1",
                            PasswordHash = "AQAAAAEAAYagAAAAECYRvg4UxADgEMkvzWBbZ7BzwVeMhe23Iu/Yc2XANppkQ3VwbLpWuwPjziLJHQfoyA==",
                            PersonId = "che32092d-d2dc-4a6a-a0b0-a4a482d21c07",
                            PhoneNumber = "984111111",
                            RoleId = "d0b3eab9-9f9d-45cc-95c0-b28fb7062868",
                            UpdateDate = new DateTimeOffset(new DateTime(2022, 5, 20, 10, 20, 2, 7, DateTimeKind.Unspecified).AddTicks(2615), new TimeSpan(0, 0, 0, 0, 0)),
                            UpdatePersonId = "1",
                            UserName = "Test"
                        });
                });

            modelBuilder.Entity("Entities.Person", b =>
                {
                    b.Property<string>("PersonId")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("InsertDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("InsertPersonId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTimeOffset>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatePersonId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("PersonId");

                    b.ToTable("Person");

                    b.HasData(
                        new
                        {
                            PersonId = "fc32092d-d2dc-4a6a-a0b0-a4a482d21c07",
                            InsertDate = new DateTimeOffset(new DateTime(2022, 5, 20, 10, 20, 2, 7, DateTimeKind.Unspecified).AddTicks(2568), new TimeSpan(0, 0, 0, 0, 0)),
                            InsertPersonId = "1",
                            Name = "superadmin",
                            UpdateDate = new DateTimeOffset(new DateTime(2022, 5, 20, 10, 20, 2, 7, DateTimeKind.Unspecified).AddTicks(2568), new TimeSpan(0, 0, 0, 0, 0)),
                            UpdatePersonId = "1"
                        },
                        new
                        {
                            PersonId = "che32092d-d2dc-4a6a-a0b0-a4a482d21c07",
                            InsertDate = new DateTimeOffset(new DateTime(2022, 5, 20, 10, 20, 2, 7, DateTimeKind.Unspecified).AddTicks(2602), new TimeSpan(0, 0, 0, 0, 0)),
                            InsertPersonId = "1",
                            Name = "Check",
                            UpdateDate = new DateTimeOffset(new DateTime(2022, 5, 20, 10, 20, 2, 7, DateTimeKind.Unspecified).AddTicks(2603), new TimeSpan(0, 0, 0, 0, 0)),
                            UpdatePersonId = "1"
                        });
                });

            modelBuilder.Entity("Entities.Role", b =>
                {
                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("InsertDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("InsertPersonId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RoleSystemName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatePersonId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("RoleId");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            RoleId = "d0b3eab9-9f9d-45cc-95c0-b28fb7062868",
                            InsertDate = new DateTimeOffset(new DateTime(2022, 5, 20, 10, 20, 2, 7, DateTimeKind.Unspecified).AddTicks(2448), new TimeSpan(0, 0, 0, 0, 0)),
                            InsertPersonId = "1",
                            RoleName = "Super Admin",
                            RoleSystemName = "superadmin",
                            UpdateDate = new DateTimeOffset(new DateTime(2022, 5, 20, 10, 20, 2, 7, DateTimeKind.Unspecified).AddTicks(2450), new TimeSpan(0, 0, 0, 0, 0)),
                            UpdatePersonId = "1"
                        });
                });

            modelBuilder.Entity("Entities.Employee", b =>
                {
                    b.HasOne("Entities.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("Role");
                });
#pragma warning restore 612, 618
        }
    }
}
